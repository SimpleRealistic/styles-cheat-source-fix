bool Aimbot::PerferBody(IClientEntity* pEntity)
{
	std::vector<int> hitboxes;
	int HitScanMode = true;
	CBaseCombatWeapon* pWeapon = (CBaseCombatWeapon*)I::EntList->GetClientEntityFromHandle(hackManager.pLocal()->GetActiveWeaponHandle());
	{
		switch (HitScanMode)
		{
		case 1:
			// head/body
			if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 1)
			{

				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 2)
			{
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.AutoAwpBody.GetState() && GameUtils::IsSniper(pWeapon))
			{
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else
			{
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Neck);
				hitboxes.push_back((int)CSGOHitboxID::UpperChest);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			break;
		case 2:
			if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 1)
			{

				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 2)
			{
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.AutoAwpBody.GetState() && GameUtils::IsSniper(pWeapon))
			{
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else
			{
				// basic +(arms, thighs)
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Neck);
				hitboxes.push_back((int)CSGOHitboxID::UpperChest);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::LeftUpperArm);
				hitboxes.push_back((int)CSGOHitboxID::RightUpperArm);
				hitboxes.push_back((int)CSGOHitboxID::LeftThigh);
				hitboxes.push_back((int)CSGOHitboxID::RightThigh);
			}
			break;
		case 3:
			if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 1)
			{

				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 2)
			{
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.AutoAwpBody.GetState() && GameUtils::IsSniper(pWeapon))
			{
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else
			{
				// heaps ++(just all the random shit)
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			break;
		case 4:
			if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 1)
			{

				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.PreferBodyAim.GetIndex() == 2)
			{
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Head);
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
			else if (Menu::Window.RageBotTab.AutoAwpBody.GetState() && GameUtils::IsSniper(pWeapon))
			{
				hitboxes.push_back((int)CSGOHitboxID::Chest);
				hitboxes.push_back((int)CSGOHitboxID::Stomach);
				hitboxes.push_back((int)CSGOHitboxID::Pelvis);
			}
		}
	}
}



void LBY2()
{
	{
		if (I::Engine->IsInGame() && I::Engine->IsConnected())
		{
			for (auto i = 0; i <= I::EntList->GetHighestEntityIndex(); i++)
			{
				auto pEntity = static_cast<IClientEntity*>(I::EntList->GetClientEntity(i));
				IClientEntity* pLocal = hackManager.pLocal();
				if (pEntity == nullptr)
					continue;
				if (pEntity == pLocal)
					continue;
				if (!pLocal->GetHealth())
					continue;
				if (pEntity->GetTeamNum() == pLocal->GetTeamNum())
					continue;
				if (!pEntity->IsAlive())
					continue;
				if (!(pEntity->GetHealth() > 0))
					continue;
				if (pEntity->IsDormant())
					continue;
				player_info_t info;
				break;
			}
		}
	}
}
void FixX()
{
	if (Menu::Window.RageBotTab.AccuracyResolverPitch.GetIndex() == 1)
	{
		for (int i = 0; i < I::Engine->GetMaxClients(); ++i)
		{
			IClientEntity *pEntity = I::EntList->GetClientEntity(i);

			{
				Vector* eyeAngles = pEntity->GetEyeAngles();
				std::string strPitch = std::to_string(eyeAngles->x);

				if (eyeAngles->x < -179.f) eyeAngles->x += 360.f;
				else if (eyeAngles->x > 90.0 || eyeAngles->x < -90.0) eyeAngles->x = 89.f;
				else if (eyeAngles->x > 89.0 && eyeAngles->x < 91.0) eyeAngles->x -= 90.f;
				else if (eyeAngles->x > 179.0 && eyeAngles->x < 181.0) eyeAngles->x -= 180;
				else if (eyeAngles->x > -179.0 && eyeAngles->x < -181.0) eyeAngles->x += 180;
				else if (fabs(eyeAngles->x) == 0) eyeAngles->x = std::copysign(89.0f, eyeAngles->x);
			}
		}
	}
}

void BruteForceY(float &angle)
{
	IClientEntity *pLocal = I::EntList->GetClientEntity(I::Engine->GetLocalPlayer());

	for (int i = 0; i < I::Engine->GetMaxClients(); ++i)
	{
		IClientEntity *pEntity = I::EntList->GetClientEntity(i);

		if (!pEntity || pEntity->IsDormant() || !pEntity->IsAlive())
			continue;

		if (pEntity->GetTeamNum() == pLocal->GetTeamNum() || !pLocal->IsAlive())
			continue;

		if (Menu::Window.RageBotTab.BruteForceY.GetState())
		{
			Vector AimAngle;
			CalcAngleYawOnly(pEntity->GetEyePosition(), pLocal->GetAbsOrigin2(), AimAngle);
			NormalizeVector(AimAngle);
			static float StoredYaw = 0;
			static bool bLowerBodyIsUpdated = false;
			float YawDelta[64];
			float Delta[64];
			float OldLowerBodyYaw[64];
			float Resolved_angles[64];
			float reset[64];
			if (pEntity->GetLowerBodyYaw() != StoredYaw) bLowerBodyIsUpdated = true;
			else bLowerBodyIsUpdated = false;
			if (bLowerBodyIsUpdated) StoredYaw = pEntity->GetLowerBodyYaw();
			if (pEntity->GetFlags() & FL_ONGROUND && pEntity->GetVelocity().Length2D() != 0) angle = pEntity->GetLowerBodyYaw();
			else
			{
				int num = globals.Shots % 5;
				switch (num) {
				case 0:angle = AimAngle.y - 15; break;
				case 1:angle = AimAngle.y + 40; break;
				case 2:angle = AimAngle.y - 40; break;
				case 3:angle = AimAngle.y + 15; break;
				}
				{
					for (int i = 0; i < 64; ++i)
					{
						IClientEntity* ent = I::EntList->GetClientEntity(i);

						if (!ent || !ent->IsAlive())
							continue;

						*(float*)((uintptr_t)ent + 0xAA08 + 4) += Delta[i];
						reset[i] = *(float*)((uintptr_t)ent + 0xAA08 + 4);

						float LowerBodyYaw = *(float*)((uintptr_t)ent + 0x39F8);

						if (OldLowerBodyYaw[i] != LowerBodyYaw)
						{
							YawDelta[i] = reset[i] - LowerBodyYaw;
							OldLowerBodyYaw[i] = LowerBodyYaw;
							*(float*)((uintptr_t)ent + 0xAA08 + 4) = LowerBodyYaw;
						}
						else
						{
							*(float*)((uintptr_t)ent + 0xAA08 + 4) = reset[i] - YawDelta[i];

							while (*(float*)((uintptr_t)ent + 0xAA08 + 4) < -180.0f)
								*(float*)((uintptr_t)ent + 0xAA08 + 4) += 360.0f;

							while (*(float*)((uintptr_t)ent + 0xAA08 + 4) > 180.0f)
								*(float*)((uintptr_t)ent + 0xAA08 + 4) -= 360.0f;
						}
						Resolved_angles[i] = *(float*)((uintptr_t)ent + 0xAA08 + 4);
					}
				}
			}
		}
	}
}
